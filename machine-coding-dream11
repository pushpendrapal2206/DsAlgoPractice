import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


/**
- Approach to the question
- Code Structure
- Correctness
- Special Edge Case handling - race conditions
*/
public class Dream11 {

    private static int K = 100;

    private Map<String, Team> teamMap;
    private Map<Integer, Game> gameMap;
    private static Map<Integer, Map<String, CustomTeam>> customTeamMap;
    private static Map<Integer, Map<Integer, Double>> pointsTable;
    private static Map<Integer, List<CustomTeam>> rankTable;
    private static AtomicInteger idGenerator = new AtomicInteger();

    public Dream11() {
        this.teamMap = new HashMap<>();
        this.gameMap = new HashMap<>();
        this.customTeamMap = new HashMap<>();
        this.pointsTable = new HashMap<>();
        this.rankTable = new HashMap<>();
        populateTeams();
    }

    private void populateTeams() {
        for(TeamName team : TeamName.values()) {
            this.teamMap.put(team.toString(), new Team(team));
        }
    }

    /**
        Given two team names, create a game and return an unique ID for this game.
    */

    public static class Game {
        private int gameId;
        private Team[] teams;

        public Game(Team team1, Team team2) {
            this.gameId = idGenerator.getAndIncrement();
            this.teams = new Team[2];
            this.teams[0] = team1;
            this.teams[1] = team2;
        }

        public int getGameId() {
            return this.gameId;
        }

        public Team[] getTeams() {
            return this.teams;
        }
    }

    public enum TeamName {
        IND(1,11),
        PAK(12,22),
        SLC(23,33),
        SA(34,44),
        WI(45,55),
        BAN(56,66),
        AUS(67,77),
        ENG(78,88),
        NZ(89,99),
        AFG(100,110),
        ZWE(111,121);

        int firstPlayer;
        int lastPlayer;

        private TeamName(int firstPlayer, int lastPlayer) {
            this.firstPlayer = firstPlayer;
            this.lastPlayer = lastPlayer;
        }

        public int getFirstPlayer() {
            return firstPlayer;
        }

        public int getLastPlayer() {
            return lastPlayer;
        }
    }
    public static class Team {
        private TeamName name;
        private Map<Integer, Player> players;

        public Team(TeamName name) {
            this.name = name;
            this.players = new HashMap<>();
            populatePlayers();
        }

        private void populatePlayers() {
            int j = 1;
            for(int i = name.firstPlayer ; i<= name.lastPlayer; i++) {
                if(j<=6) {
                    Player batsmen = new Player(i, PlayerType.BATSMEN);
                    this.players.put(i, batsmen);
                } else {
                    Player bowler = new Player(i, PlayerType.BOWLER);
                    this.players.put(i, bowler);
                }
                j++;
            }
        }
    }

    public static class CustomTeam implements Comparable<CustomTeam> {
        private String name;
        private List<Player> players;
        private double tp;
        private int gameId;

        public CustomTeam(String name, List<Player> players) {
            this.name = name;
            this.players = players;
            this.tp = 0;
            this.gameId = 0;
        }

        public String getName() {
            return this.name;
        }

        public List<Player> getPlayers() {
            return new ArrayList<>(this.players);
        }

        @Override
        public int compareTo(CustomTeam team) {
            double tp = 0;
            for(Player p : this.players) {
                tp = tp + pointsTable.get(gameId).get(p.name);
            }
            double tp2 = 0;
            for(Player p : ((CustomTeam) team).players) {
                tp2 = tp2 + pointsTable.get(gameId).get(p.name);
            }
            if(tp < tp2) {
                return 1;
            } else if(tp > tp2) {
                return -1;
            } else {
                return 0;
            }
        }

    }

    public static class Player {
        private int name;
        private PlayerType type;
        private double points;

        public Player(int name, PlayerType type) {
            this.name = name;
            this.type = type;
            this.points = 0;
        }
    }

    public enum PlayerType {
        BATSMEN,
        BOWLER;
    }

    public int createGame (String team1, String team2) {
        Game game = new Game(teamMap.get(team1), teamMap.get(team2));
        gameMap.put(game.getGameId(), game);
        return game.getGameId();
    }


    /**
        Given a gameId, start the game
    */
    public void startGame(int gameId){}


    /**
        An external system will call you with the outcome of each ball. Given a gameId , Batsmen id, bowler id, and outcome, increment/decrement  points         accordingly for users associated with this game. To keep it simple, We just follow what the external system sends us, and we donâ€™t need to               maintain the cricket rules in our logic.
    */
    public void play(int gameId, int batsmen, int bowler,  int outcome){

        Map<Integer, Doble> points = pointsTable.get(gameId);

        switch(outcome) {
            case 1 :
                points.put(batsmen, points.getOrDefault(batsmen, 0) + 0.5);
                points.put(bowler, points.getOrDefault(bowler, 0) + 0);
                break;
            case 2: ;
                points.put(batsmen, points.getOrDefault(batsmen, 0) + 1);
                points.put(bowler, points.getOrDefault(bowler, 0) - 0.5);
                break;
            case 4 :  ;
                points.put(batsmen, points.getOrDefault(batsmen, 0) + 2);
                points.put(bowler, points.getOrDefault(bowler, 0) - 1);
                break;
            case 6: ;
                points.put(batsmen, points.getOrDefault(batsmen, 0) + 3);
                points.put(bowler, points.getOrDefault(bowler, 0) - 2);
            break;
            case -1 :  ;
                points.put(batsmen, points.getOrDefault(batsmen, 0) - 2);
                points.put(bowler, points.getOrDefault(bowler, 0) + 4);
            break;
            default: throw new Exception("invalid outcome");
        }

        for(Team team : gameMap.get(gameId).getTeams()) {
            if(team.players.containsKey(batsmen)) {
                Player p = team.players.get(batsmen);
                p.points = p.points + points.get(batsmen);
            }
            if(team.players.containsKey(bowler)) {
                Player p = team.players.get(bowler);
                p.points = p.points + points.get(bowler);
            }
        }

        Map<String, CustomTeam> customT = customTeamMap.get(gameId);
        for(CustomTeam ct:  customT.values()) {
            for(Player p : ct.players) {
                if(batsmen == p.name || bowler == p.name) {
                    ct.tp = ct.tp + p.points;
                }
            }
            rankTable.computeIfAbsent(gameId, z -> new ArrayList<>()).add(ct);
        }

        Collections.sort(rankTable.get(gameId));
    }


    /**
        Given a gameId and List of players, a team should be created for the user
    */
    public void createTeamForUser(int gameId, List<Integer> players, String userName){
        if(players.size() != 11) {
            throw new Exception("Team size shoudl be 11");
        }
        if(!gameMap.containsKey(gameId)) {
            throw new Exception("Invaid game id");
        }
        Team[] teamsForThisGame =  gameMap.get(gameId).getTeams();
        Team team1 = teamsForThisGame[0];
        Teams team2 = teamsForThisGame[1];

        String teamName = userName + gameId;
        List<Player> playerList = new ArrayList<>();
        for(int playerName : players) {
               if(team1.players.containsKey(playerName) || team2.players.containsKey(playerName)) {
                   Player p1 = team1.players.get(playerName);
                   if(p1 == null) {
                       p1 = team2.players.get(playerName);
                   }
                   playerList.add(p1);
               } else {
                   throw new Exception("Player doesn't exist: " +  playerName);
               }
        }

        CustomTeam customTeam = new CustomTeam(teamName, playerList);
        Map<String, CustomTeam> map = new HashMap<>();
        map.put(userName, customTeam);
        customTeamMap.put(gameId, map);
    }


    /**
        Given a gameId , get the top k user who has maximum points so far. Top K users will be displayed in the app, and people keep refreshing now and then to see the top K users
    */
    public List<String> getTopUser(int gameId){
        List<CustomTeam> list = rankTable.get(gameId);
        List<String> output = new ArrayList<>();
        for(int i = 0; i<1000; i++) {
            output.add(list.get(i).name);
        }
        return output;
    }

    /**
        Given a gameId , end the game and return the user who is the winner with maximum points. Additional -  In case of a tie, use your own strategy for tie breaking
    */
    public String endGame(int gameId){
        return rankTable.get(gameId).get(0).name;
    }


    public static void main(String args[] ) throws Exception {
        Dream11 dream11Manager = new Dream11();

        int gameId = dream11Manager.createGame("IND", "PAK");

        System.out.printf("Game has started - %d%n", gameId);

        List<Integer> userTeam1 = Arrays.asList(1,2,14,15,5,6,7,8,9,21,22);
        List<Integer> userTeam2 = Arrays.asList(12,13,3,4,16,17,18,19,20,10,11);
        dream11Manager.createTeamForUser(gameId, userTeam1, "user_1");
        dream11Manager.createTeamForUser(gameId, userTeam2, "user_2");

        dream11Manager.startGame(gameId);
        dream11Manager.play(gameId, 1, 20, 1);
        dream11Manager.play(gameId, 2, 21, 6);
        dream11Manager.play(gameId, 12, 7, 2);
        dream11Manager.play(gameId, 5, 10, -1);
        dream11Manager.play(gameId, 6, 11, 4);

        List<String> topUsers = dream11Manager.getTopUser(gameId);
        System.out.printf("Top Users %s%n", topUsers.toString());

        String topUser = dream11Manager.endGame(gameId);
        System.out.printf("Top User %s%n", topUser);
    }
}